from tools import *


def create_speech(clean_signal_path, ir, if_plot=True):
    """
    Creates a simulated reverberated speech signal by convolving a clean speech signal with a given impulse response (IR).
    
    Parameters:
    clean_signal_path (str): The path to the clean speech signal file (e.g., a .wav file).
    ir (numpy.ndarray): The impulse response array to convolve with the clean speech.
    if_plot (bool): Whether to plot the signal (default: True).

    Returns:
    convolved_signal (numpy.ndarray): The reverberated speech signal generated by convolution.
    """
    # Load the clean speech signal from the given path
    clean_signal, fs = load_audio(clean_signal_path)
    
    # Perform convolution of the clean signal with the impulse response (IR)
    convolved_signal = signal.convolve(clean_signal, ir, mode='full')
    
    # Truncate the convolved signal to match the length of the original clean signal
    convolved_signal = convolved_signal[:len(clean_signal)]  
    
    return convolved_signal

fs = 16000
for i in range(1, 8):
    task = 'task_1_level_' + str(i)
    task_folder = task.replace('t', 'T', 1).replace('l', 'L', 1)
    # Load the corresponding impulse response (IR) for the task
    read_ir = np.load(f'HelsinkiSpeech2024/Impulse_Responses/IR/ir_swept_sine_wave_{task}.npy')
    clean_signal_path = f'HelsinkiSpeech2024/{task_folder}/Clean/{task}_clean_001.wav'
    convolved_signal = create_speech(clean_signal_path, read_ir)
    save_path = f'HelsinkiSpeech2024/{task_folder}/Created/{task}_convolved_001.wav'
    check_folder(save_path)
    save_audio(save_path, convolved_signal, fs)
